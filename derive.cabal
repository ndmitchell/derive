cabal-version:  >= 1.18
build-type:     Default
name:           derive
version:        2.6.3
build-type:     Simple
copyright:      Neil Mitchell 2006-2017
author:         Neil Mitchell <ndmitchell@gmail.com>
maintainer:     Neil Mitchell <ndmitchell@gmail.com>
homepage:       https://github.com/ndmitchell/derive#readme
bug-reports:    https://github.com/ndmitchell/derive/issues
license:        BSD3
license-file:   LICENSE
synopsis:       A program and library to derive instances for data types
category:       Development
description:
    Data.Derive is a library and a tool for deriving instances for Haskell programs.
    It is designed to work with custom derivations, SYB and Template Haskell mechanisms.
    The tool requires GHC, but the generated code is portable to all compilers.
    We see this tool as a competitor to DrIFT.
extra-doc-files:
    README.md
    CHANGES.txt
tested-with:        GHC==8.2.1, GHC==8.0.2, GHC==7.10.3, GHC==7.8.4, GHC==7.6.3

source-repository head
    type:     git
    location: https://github.com/ndmitchell/derive.git

executable derive
    default-language: Haskell2010
    build-depends: base==4.* , derive
    main-is: Main.hs

library
    default-language: Haskell2010
    hs-source-dirs: src
    build-depends:
        base == 4.*,
        filepath, syb, template-haskell, containers, pretty,
        directory, process, bytestring,
        haskell-src-exts == 1.20.*,
        transformers >= 0.2,
        uniplate >= 1.5 && < 1.7

    exposed-modules:
        Data.DeriveMain
        Data.DeriveTH
        Data.DeriveDSL
        Data.Derive.All
        Data.Derive.DSL.Apply
        Data.Derive.DSL.Derive
        Data.Derive.DSL.DSL
        Data.Derive.DSL.HSE
        Data.Derive.DSL.SYB
        Data.Derive.Instance.Arities
        Data.Derive.Class.Arities
        Data.Derive.Class.Default
        Language.Haskell
        Language.Haskell.Convert
        Language.Haskell.TH.All
        Language.Haskell.TH.Compat
        Language.Haskell.TH.Data
        Language.Haskell.TH.ExpandSynonym
        Language.Haskell.TH.Helper
        Language.Haskell.TH.Peephole
-- GENERATED START
        Data.Derive.Arbitrary
        Data.Derive.ArbitraryOld
        Data.Derive.Arities
        Data.Derive.Binary
        Data.Derive.BinaryDefer
        Data.Derive.Bounded
        Data.Derive.DataAbstract
        Data.Derive.Default
        Data.Derive.EnumCyclic
        Data.Derive.Fold
        Data.Derive.From
        Data.Derive.Has
        Data.Derive.Is
        Data.Derive.JSON
        Data.Derive.LazySet
        Data.Derive.Lens
        Data.Derive.Monoid
        Data.Derive.NFData
        Data.Derive.Ref
        Data.Derive.Serial
        Data.Derive.Serialize
        Data.Derive.Set
        Data.Derive.UniplateDirect
        Data.Derive.UniplateTypeable
        Data.Derive.Update
-- GENERATED STOP

        -- Mainly internal but some still people use them
        -- to implement derivations outside
        Data.Derive.Internal.Derivation
    other-modules:
        Data.Derive.Internal.Instance
        Data.Derive.Internal.Traversal
        Derive.Main
        Derive.Derivation
        Derive.Flags
        Derive.Generate
        Derive.Test
        Derive.Utils
